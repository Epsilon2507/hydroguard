import heapq

# Define a class for the nodes in the grid
class Node:
    def __init__(self, x, y, g=0, h=0, parent=None):
        self.x = x  # X coordinate
        self.y = y  # Y coordinate
        self.g = g  # Cost from start node to this node
        self.h = h  # Heuristic cost from this node to the goal
        self.f = g + h  # Total cost
        self.parent = parent  # Parent node

    # Comparison function for heapq to prioritize nodes with lower f value
    def __lt__(self, other):
        return self.f < other.f

# Heuristic function (using Manhattan distance for grid environments)
def heuristic(a, b):
    return abs(a.x - b.x) + abs(a.y - b.y)

# A* algorithm
def a_star(start, goal, grid):
    open_list = []
    closed_list = set()
    
    # Initialize the starting node
    heapq.heappush(open_list, start)
    
    while open_list:
        # Get the node with the lowest f value
        current_node = heapq.heappop(open_list)
        
        # If we've reached the goal, reconstruct the path
        if current_node.x == goal.x and current_node.y == goal.y:
            path = []
            while current_node:
                path.append((current_node.x, current_node.y))
                current_node = current_node.parent
            return path[::-1]  # Return reversed path
        
        closed_list.add((current_node.x, current_node.y))
        
        # Explore neighbors (up, down, left, right)
        neighbors = [
            (0, 1), (1, 0), (0, -1), (-1, 0)
        ]
        for n in neighbors:
            x, y = current_node.x + n[0], current_node.y + n[1]
            
            # Make sure the neighbor is within bounds and not blocked
            if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 0:
                neighbor = Node(x, y, current_node.g + 1)
                
                # Skip if already visited
                if (x, y) in closed_list:
                    continue
                
                # Calculate heuristic
                neighbor.h = heuristic(neighbor, goal)
                neighbor.f = neighbor.g + neighbor.h
                neighbor.parent = current_node
                
                # Add neighbor to the open list
                heapq.heappush(open_list, neighbor)
    
    # No path found
    return None

# Example usage
if __name__ == "__main__":
    # 0 = free space, 1 = obstacle
    grid = [
        [0, 0, 0, 0, 0],
        [0, 1, 1, 1, 0],
        [0, 1, 0, 1, 0],
        [0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0]
    ]
    
    start_node = Node(0, 0)  # Starting point
    goal_node = Node(4, 4)   # Goal point
    
    # Find the shortest path using A*
    path = a_star(start_node, goal_node, grid)
    
    if path:
        print("Path found:", path)
    else:
        print("No path found.")
